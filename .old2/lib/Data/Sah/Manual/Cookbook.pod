# just to make PodWeaver happy at the moment
package Data::Sah::Manual::Cookbook;

=pod

=head1 NAME

Sah::Manual::Cookbook - Sah cookbook

=head1 RECIPES

Note: if you want to see example schemas, see L<Data::Sah::Manual::Cookbook::Schemas>.

=head2 Introspection

All code in this section below assume this preamble:

 use Data::Dump;
 use Sah;
 my $sah = Sah->new;

=head3 List all known type names

We want to know all known types.

 dd $sah->list_type_names;

The code will print something like:

 (
   "all",
   "and",
   "any",
   "array",
   ...
 )

=head3 List all known clauses for a certain type

We want to know what clauses the type 'array' supports:

 dd $sah->list_clauses('array');

The code will print something like below (all clause aliases are also listed):

 (
   "all_elems",
   "is_one_of",
   "maxlen",
   "max_len",
   ...
 )

=head3 Check whether clause name is valid

We want to know whether the 'array' supports the clause 'divisible_by'.

 die unless $sah->is_clause('array', 'divisible_by');

Or alternatively you can use list_clauses() in previous recipe.

my @clauses = $sah->list_clauses('array');
 die unless 'divisible_by' ~~ @clauses;

=head3 List aliases of a clause

We want to know what are the aliases for the string clause named 'maxlen'.

 dd $sah->list_clause_aliases('str', 'maxlen');

This will give something like:

 ("max_len", "max_length", "maxlen", "maxlength")

The first element is the canonical name.

=head3 Find out the schema for clause value

Under the hood, the schema is stored in the type role's clausearg_CLAUSE()
method. E.g:

 dd Data::SahType::Str::clausearg_match();

Will print something like:

 ["str", {required=>1, isa_regex=>1}]

=head3 List all known functions

 $sah->list_functions;

will print something like:

 (
   "abs",
   "add",
   "atan2",
   ...
 )

See documentation in Data::SahFunc::* (e.g. in L<Data::Sah::Func::Std>) to find out more
about each function.

=head3 Find out the schema for a function's arguments

Under the hood, the schema is stored in the function role's funcargs_FUNC()
method:

 dd Data::SahFunc::Std::funcargs_ceil();

will print something like:

 ["num", {required => 1}]

=head1 SEE ALSO

L<Data::Sah::Manual::Cookbook::Schemas>

=cut
