# just to make PodWeaver happy at the moment
package Data::Sah::Manual::Type;

=pod

=head1 NAME

Sah::Manual::Type - Creating a new type

=head1 INTRODUCTION

THIS IS A STUB

If you feel the current types do not satisfy your needs, you might want to add a
new type. Before you decide to do that, consider these easier alternatives
first:

=over 4

=item * creating subschemas/subtypes

You can inherit from existing types/schemas, add/remove/replace clauses from the
parent schema.

=item * extending a type with new clause

See the available Data::Sah::TypeX::* distributions, or write your own type
extension.

=item * creating a function

See L<Data::Sah::Manual::Function> for details on adding a new function.

=back

If you think you really need a new type, below are the steps. In this example we
will be adding a new 'complex' type, which will be based on the 'numeric' type.

First, create Data::Sah::Type::complex distribution.

Data::Sah::Type::complex is a role which will define the type name(s) and what
clauses the type supports. In Sah/Type/complex.pm, add the following:

 package Data::Sah::Type::complex;
 use Moo::Role;

 ...

 clause ...;

After that, add type handler for each compiler you want. Example:

 package Data::Sah::Compiler::perl::TH::complex;
 ...

 package Data::Sah::Compiler::human::TH::complex;
 ...

 package Data::Sah::Compiler::js::TH::complex;
 ...

XXX Add translation.


=head1 SEE ALSO

L<Data::Sah::Manual::TypeX>

L<Data::Sah::Manual::Schema/"SUBSCHEMA">

L<Data::Sah::Manual::Func>

=cut
